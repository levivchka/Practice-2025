import json
import random
import telebot
from data import messages
import threading
import time

TOKEN = '*–ù—É–∂–Ω–æ —É–∑–∞–∑–∞—Ç—å —Ç–æ–∫–µ–Ω*'
bot = telebot.TeleBot(TOKEN)

DATA_FILE = 'data/user_data.json'

def load_data():
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

@bot.message_handler(commands=['start'])
def handle_start(message):
    data = load_data()
    user_id = str(message.from_user.id)
    username = message.from_user.username
    display_name = f"{message.from_user.first_name} (@{username})" if username else message.from_user.first_name

    if username:
        data["usernames"][user_id] = username
    if display_name not in data["recent_users"]:
        data["recent_users"].append(display_name)
    if int(user_id) not in data["subscribers"]:
        data["subscribers"].append(int(user_id))

    save_data(data)
    bot.reply_to(message, "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –¥–æ–±—Ä–æ—Ç—ã –∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏! –ù–∞–ø–∏—à–∏ /help, –µ—Å–ª–∏ –ø–æ—Ç–µ—Ä—è–ª—Å—è üåà")

@bot.message_handler(commands=['help'])
def handle_help(message):
    help_text = (
        "üß≠ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n"
        "/start - ‚ú® –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–æ–±—Ä–æ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—é\n"
        "/now - üí° –ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
        "/subscribe - üíå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–µ–¥–∫–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–∏\n"
        "/unsubscribe - üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –º–æ—Ç–∏–≤–∞—Ü–∏–∏\n"
        "/friend @username - ü§ù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –¥—Ä—É–≥—É\n"
        "/hug @username - ü´Ç –û–±–Ω—è—Ç—å –¥—Ä—É–≥–∞\n"
        "/flip - üé≤ –ü–æ–¥–±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É (–ø—á—ë–ª–∫–∞ –∏–ª–∏ –±–æ–∂—å—è –∫–æ—Ä–æ–≤–∫–∞)\n"
        "/story - üìñ –ü–æ–ª—É—á–∏—Ç—å –¥–æ–±—Ä—É—é —Å–∫–∞–∑–∫—É\n"
        "/inspire - üé® –ò–¥–µ—è –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞\n"
        "/donate - ‚òïÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞\n"
    )
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['now'])
def handle_now(message):
    quote = random.choice(messages.quotes)
    bot.send_message(message.chat.id, f"üí° {quote}")

@bot.message_handler(commands=['subscribe'])
def handle_subscribe(message):
    data = load_data()
    user_id = int(message.from_user.id)
    if user_id not in data["subscribers"]:
        data["subscribers"].append(user_id)
        save_data(data)
        bot.reply_to(message, "üíå –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞. –ú–æ—Ç–∏–≤–∞—Ü–∏—è –±—É–¥–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ üíõ")
    else:
        bot.reply_to(message, "–¢—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω üòä")

@bot.message_handler(commands=['unsubscribe'])
def handle_unsubscribe(message):
    data = load_data()
    user_id = int(message.from_user.id)
    if user_id in data["subscribers"]:
        data["subscribers"].remove(user_id)
        save_data(data)
        bot.reply_to(message, "üö´ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ú—ã –≤—Å—ë —Ä–∞–≤–Ω–æ —Ç–µ–±—è –ª—é–±–∏–º üíõ")
    else:
        bot.reply_to(message, "–¢—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω üê¢")

@bot.message_handler(commands=['friend'])
def friend_message(message):
    try:
        data = load_data()
        usernames = data["usernames"]
        quotes = messages.quotes

        parts = message.text.split()
        if len(parts) != 2 or not parts[1].startswith('@'):
            raise ValueError
        friend_username = parts[1][1:]
        friend_chat_id = next((int(cid) for cid, uname in usernames.items() if uname == friend_username), None)

        if friend_chat_id:
            bot.send_message(friend_chat_id, f"{message.from_user.first_name} (@{message.from_user.username}) –ø–æ—Å–ª–∞–ª(–∞) —Ç–µ–±–µ –º–æ—Ç–∏–≤–∞—à–∫—É:\n\n{random.choice(quotes)}")
            bot.send_message(message.chat.id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ @{friend_username} üíå")
        else:
            bot.send_message(message.chat.id, f"@{friend_username} –µ—â—ë –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª(–∞) –±–æ—Ç–∞... üòî")
    except:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /friend @username")

@bot.message_handler(commands=['hug'])
def hug_message(message):
    try:
        data = load_data()
        usernames = data["usernames"]
        hug_messages = messages.hug_messages

        parts = message.text.split()
        if len(parts) != 2 or not parts[1].startswith('@'):
            raise ValueError
        friend_username = parts[1][1:]
        friend_chat_id = next((int(cid) for cid, uname in usernames.items() if uname == friend_username), None)

        if friend_chat_id:
            msg = random.choice(hug_messages)
            bot.send_message(friend_chat_id, f"{message.from_user.first_name} (@{message.from_user.username}) {msg}")
            bot.send_message(message.chat.id, f"–û–±–Ω–∏–º–∞—à–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ @{friend_username} ü´Ç")
        else:
            bot.send_message(message.chat.id, f"@{friend_username} –µ—â—ë –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª(–∞) –±–æ—Ç–∞. –ü—É—Å—Ç—å –Ω–∞–ø–∏—à–µ—Ç /start!")
    except:
        bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /hug @username")

@bot.message_handler(commands=['flip'])
def handle_flip(message):
    result = random.choice(["üêù –ü—á—ë–ª–∫–∞", "üêû –ë–æ–∂—å—è –∫–æ—Ä–æ–≤–∫–∞"])
    bot.reply_to(message, f"üé≤ {result}!")

@bot.message_handler(commands=['story'])
def handle_story(message):
    story = random.choice(messages.stories)
    bot.send_message(message.chat.id, f"üìñ {story}")

@bot.message_handler(commands=['inspire'])
def handle_inspire(message):
    idea = random.choice(messages.creative_prompts)
    bot.send_message(message.chat.id, f"üé® {idea}")

@bot.message_handler(commands=['donate'])
def handle_donate(message):
    bot.reply_to(message, "‚òïÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞: https://www.tbank.ru/cf/nAOIjJI6s4")

@bot.message_handler(commands=['users'])
def show_users(message):
    data = load_data()
    admin_usernames = messages.admin_usernames  # –∏–ª–∏ admin_username, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫ —Ç—ã —ç—Ç–æ –Ω–∞–∑–≤–∞–ª
    recent_users = data.get("recent_users", [])

    if message.from_user.username not in admin_usernames:
        return

    if not recent_users:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª –±–æ—Ç–∞.")
    else:
        user_list = "\n".join([f"{i+1}. {user}" for i, user in enumerate(recent_users)])
        bot.send_message(message.chat.id, f"üë• –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n{user_list}")


def send_motivation_to_subscribers():
    while True:
        data = load_data()
        subscribers = data.get("subscribers", [])
        total = len(subscribers)

        if total == 0:
            time.sleep(3600)
            continue

        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if total <= 20:
            hourly_chance = 0.2
            send_percent = 0.25
        elif total <= 50:
            hourly_chance = 0.15
            send_percent = 0.20
        else:
            hourly_chance = 0.10
            send_percent = 0.15

        # –†–∞–Ω–¥–æ–º: –±—É–¥–µ—Ç –ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –≤ —ç—Ç–æ–º —á–∞—Å—É
        if random.random() < hourly_chance:
            send_count = max(1, int(total * send_percent))
            selected_users = random.sample(subscribers, send_count)
            for user_id in selected_users:
                try:
                    bot.send_message(user_id, f"üíå {random.choice(messages.quotes)}")
                    print(f"–ú–æ—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        else:
            print("–ß–∞—Å –ø—Ä–æ–ø—É—â–µ–Ω ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞.")

        time.sleep(3600)

threading.Thread(target=send_motivation_to_subscribers, daemon=True).start()
bot.polling(none_stop=True)
